#!/usr/bin/env python3

import argparse
import sys
import logging
from utils.fwutils import IPUFirmware
from utils.common_ipu import (
    VERSIONS,
    get_current_version,
    minicom_get_version,
)
from utils.common_ipu import console_ipu
from utils.common_bf import console_bf
from utils.common import (
    DPUType,
    detect_dpu_type,
    scan_for_dpus,
    setup_logging,
    run,
)

logger = logging.getLogger(__name__)


def reset(args: argparse.Namespace) -> None:
    run("ssh root@100.0.0.100 sudo reboot")


def firmware_up(args: argparse.Namespace) -> None:
    fw = IPUFirmware(
        args.imc_address,
        args.version,
        repo_url=args.repo_url,
        dry_run=args.dry_run,
        verbose=args.verbose,
    )
    fw.reflash_ipu()


def firmware_reset(args: argparse.Namespace) -> None:
    result = get_current_version(args.imc_address, logger=logger)
    if result.returncode:
        logger.debug("Failed with ssh, trying minicom!")
        try:
            minicom_get_version(logger=logger)
        except Exception as e:
            logger.error(f"Error ssh try: {result.err}")
            logger.error(f"Exception with minicom: {e}")
            logger.error("Exiting...")
            sys.exit(result.returncode)
    fw = IPUFirmware(
        args.imc_address,
        version=result.out,
        repo_url=args.repo_url,
        dry_run=args.dry_run,
        verbose=args.verbose,
    )
    fw.reflash_ipu()


def firmware_version(args: argparse.Namespace) -> None:
    result = get_current_version(args.imc_address, logger=logger)
    if result.returncode:
        logger.debug("Failed with ssh, trying minicom!")
        try:
            minicom_get_version(logger=logger)
        except Exception as e:
            logger.error(f"Error ssh try: {result.err}")
            logger.error(f"Exception with minicom: {e}")
            logger.error("Exiting...")
            sys.exit(result.returncode)
    print(result.out)
    def console(self) -> None:
        result = detect_dpu_type(scan_for_dpus())
        if result.returncode:
            logger.error(f"Failed to detect dpu type: {result.err}")
        dpu_type = result.out
        logger.debug(f"Detected dpu_type: {dpu_type}")
        if dpu_type == DPUType.IPU.name:
            console_ipu(self.args)
        elif dpu_type == DPUType.BF.name:
            console_bf(self.args)
        elif dpu_type == DPUType.Octeon.name:
            logger.error("Marvel Octeon console support has not yet been implemented!")
        else:
            logger.error("UNKNOWN Type")


def main() -> None:
    parser = argparse.ArgumentParser(description="Tools to interact with an IPU")
    parser.add_argument(
        "--verbose",
        action="store_true",
        help="Increse Output",
    )
    subparsers = parser.add_subparsers(
        title="subcommands", description="Valid subcommands", dest="subcommand"
    )

    reset_parser = subparsers.add_parser("reset", help="Reset the IPU")
    reset_parser.set_defaults(func=reset)

    # Firmware command with its own subcommands (reset/up)
    firmware_parser = subparsers.add_parser("firmware", help="Control the IPU firmware")
    firmware_subparsers = firmware_parser.add_subparsers(
        title="firmware commands",
        description="Valid firmware subcommands",
        dest="firmware_command",
    )

    firmware_parser.add_argument(
        "--imc-address", required=True, help="IMC address for the firmware"
    )
    firmware_parser.add_argument(
        "--repo-url", help="Repo address for the firmware images"
    )

    firmware_parser.add_argument(
        "--dry-run",
        action="store_true",  # This makes it a flag (boolean)
        help="Simulate the firmware changes without making actual changes",
    )
    # Firmware reset subcommand
    firmware_reset_parser = firmware_subparsers.add_parser(
        "reset", help="Reset the firmware"
    )
    firmware_reset_parser.set_defaults(func=firmware_reset)

    # Firmware up subcommand
    firmware_up_parser = firmware_subparsers.add_parser(
        "up", help="Update the firmware"
    )
    firmware_up_parser.set_defaults(func=firmware_up)
    firmware_up_parser.add_argument(
        "--version",
        choices=VERSIONS,
        help="Version for the firmware Up",
    )

    # firmware version subcommand
    firmware_version_parser = firmware_subparsers.add_parser(
        "version", help="Retrieve firmware version"
    )
    firmware_version_parser.set_defaults(func=firmware_version)

    # List commands
    list_parser = subparsers.add_parser("list", help="list devices")
    list_parser.set_defaults(func=list_dpus)

    console_parser = subparsers.add_parser("console", help="Open console for the IPU")
    console_parser.set_defaults(func=console)
    console_parser.add_argument(
        "target", choices=["imc", "acc"], help="Specify imc or acc as the target"
    )

    args = parser.parse_args()
    setup_logging(args.verbose)
    if hasattr(args, "func"):
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
