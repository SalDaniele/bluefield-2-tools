#!/usr/bin/env python3

import argparse
import dataclasses
import os
import re
import shlex
import shutil
import subprocess
import tempfile


@dataclasses.dataclass(frozen=True)
class Result:
    out: str
    err: str
    returncode: int


def run(cmd: str, env: dict[str, str] = os.environ.copy()) -> Result:
    args = shlex.split(cmd)
    res = subprocess.run(
        args,
        capture_output=True,
        env=env,
    )

    return Result(
        out=res.stdout.decode("utf-8"),
        err=res.stderr.decode("utf-8"),
        returncode=res.returncode,
    )


def reset(args):
    run("ssh root@100.0.0.100 sudo reboot")


def console(args):
    if args.target == "imc":
        minicom_cmd = "minicom -b 460800 -D /dev/ttyUSB2"
    else:
        minicom_cmd = "minicom -b 115200 -D /dev/ttyUSB0"

    minirc_path = "/root/.minirc.dfl"
    if os.path.exists(minirc_path):
        backed_up = True
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file_path = temp_file.name
        shutil.move(minirc_path, temp_file_path)
    else:
        backed_up = False
        temp_file_path = ""

    with open(minirc_path, "w") as new_file:
        new_file.write("pu rtscts           No\n")
    os.system(minicom_cmd)

    if backed_up:
        shutil.move(temp_file_path, minirc_path)


def find_bus_pci_address(address: str) -> str:
    pattern = r"(\d+):(\d+)\.(\d+)"

    match = re.match(pattern, address)

    if match:
        bus = match.group(1)
        new_address = f"{bus}:00.0"
        return new_address
    else:
        return "Invalid PCI address format"


def list_dpus(args):
    del args
    devs = {}
    for e in run("lspci").out.split("\n"):
        if "Intel Corporation Device 1453" in e:
            addr = find_bus_pci_address(e.split()[0])
            for line in run("lshw -c network -businfo").out.split("\n"):
                if addr in line:
                    dev = line.split()[1]
                    devs[dev] = (addr, "IPU")

    print("ID     netdev    PCI-Address   Kind")
    print("-----  --------  ------------  ------")
    for i, (k, (d, kind)) in enumerate(devs.items()):
        print(f"{i: 5d}  {k.ljust(8)}  {d.ljust(12)}  {kind}")


def main():
    parser = argparse.ArgumentParser(description="Tools to interact with an IPU")
    subparsers = parser.add_subparsers(
        title="subcommands", description="Valid subcommands", dest="subcommand"
    )

    reset_parser = subparsers.add_parser("reset", help="Reset the IPU")
    reset_parser.set_defaults(func=reset)

    list_parser = subparsers.add_parser("list", help="list devices")
    list_parser.set_defaults(func=list_dpus)

    console_parser = subparsers.add_parser("console", help="Open console for the IPU")
    console_parser.set_defaults(func=console)
    console_parser.add_argument(
        "target", choices=["imc", "acc"], help="Specify imc or acc as the target"
    )

    args = parser.parse_args()
    if hasattr(args, "func"):
        args.func(args)
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
