#!/usr/bin/env python3
import argparse, os, sys, subprocess
from posixpath import dirname
from multiprocessing import Process
import pexpect
import paramiko
import time
import re
import io
import common_bf
import shutil
import http.server
import socketserver

def read_as_string(cmd):
  with subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:
    return (proc.stdout.read().decode("utf-8"), proc.stderr.read().decode("utf-8"))

def get_ip(interface):
  output = read_as_string("ip a show".split() + [interface])[0]
  inet_lines = filter(lambda x: x.startswith("    inet"), output.split("\n"))
  inet_lines = map(lambda x: x.strip().split()[1], inet_lines)
  return list(inet_lines)

def copy(src, dst):
  return read_as_string(["cp", src, dst])

def write_file(fn, contents):
  with open(fn, "w") as f:
    f.write(contents)

def read_file(fn):
  with open(fn, "r") as f:
    return "".join(f.readlines())

def read_args():
  parser = argparse.ArgumentParser(description='Set up a PXE server on a specific port.')
  parser.add_argument('iso', metavar='iso', type=str, help='iso to use for PXE booting')
  parser.add_argument("-w",  metavar='id_rsa', dest='id_rsa', default='', type=str, help='id_rsa is required')
  help = ("if id_rsa is specified, the script will log"
  " in to the BF-2 and run \'ip --json a\' before quitting."
  " This also means that the script will only block when the BF-2 has booted"
  )
  parser.add_argument('-i', '--id', dest='id', default=0, action='store', type=int, help='Specify the id of the BF-2.')

  args = parser.parse_args()
  args.ip = "172.31.100.1"
  args.net_prefix = "24"
  args.subnet = "172.31.100.0"
  print(args.id_rsa)
  return args

def validate_args(args):
  if ":/" not in args.iso and not os.path.exists(args.iso):
    print(f"Couldn't read iso file {args.iso}")
    sys.exit(-1)

  common_bf.find_bf2_pci_addresses_or_quit(args.id)

def dhcp_config(server_ip, subnet):
  return f"""option space pxelinux;
option pxelinux.magic code 208 = string;
option pxelinux.configfile code 209 = text;
option pxelinux.pathprefix code 210 = text;
option pxelinux.reboottime code 211 = unsigned integer 32;
option architecture-type code 93 = unsigned integer 16;
allow booting;
allow bootp;

next-server {server_ip};
always-broadcast on;

filename "/BOOTAA64.EFI";

subnet {subnet} netmask 255.255.255.0 {{
    range 172.31.100.10 172.31.100.20;
    option broadcast-address 172.31.100.255;
    option routers {server_ip};
    option domain-name-servers 10.19.42.41, 10.11.5.19, 10.2.32.1;
    option domain-search "anl.lab.eng.bos.redhat.com";
    option dhcp-client-identifier = option dhcp-client-identifier;
}}

"""

def grub_config(base_path, ip, is_coreos):
  if is_coreos:
    opts = f"coreos.live.rootfs_url=http://{ip}/rootfs.img ignition.firstboot ignition.platform.id=metal"
    ign_opts = f"{base_path}/ignition.img"
  else:
    opts = f"inst.repo=http://{ip}/mnt inst.ks=http://{ip}/kickstart.ks"
    ign_opts = ""

  return f"""
  set timeout=5

menuentry 'Install' --class red --class gnu-linux --class gnu --class os {{
    linux {base_path}/vmlinuz showopts {opts} \
        console=tty0 console=tty1 console=ttyS0,115200 console=ttyS1,115200 \
        ip=dhcp console=ttyAMA1 console=hvc0 console=ttyAMA0 earlycon=pl011,0x01000000
    initrd {base_path}/initrd.img {ign_opts}
}}

menuentry 'Reboot' --class red --class gnu-linux --class gnu --class os {{
    reboot
}}
"""

def rshim_base(args):
  return f"/dev/rshim{args.id//2}/"

def bf_reboot(args):
  with open(f"{rshim_base(args)}/misc", "w") as f:
    f.write("SW_RESET 1")

def prepare_pxe(args):
  ip = get_ip(args.port)
  if ip and (len(ip) != 1 or ip[0] != "%s/%s" % (args.ip, args.net_prefix)):
    print("The port already has the following ip addresses: %s" % ip)
    read_as_string("ip a f".split() + [args.port])

  read_as_string(("ip a a %s/%s dev %s" % (args.ip, args.net_prefix, args.port)).split())

  pxe_mount = "/var/ftp/mnt"
  cmd = f"mkdir -p {pxe_mount}"
  read_as_string(cmd.split())
  cmd = f"mount -t iso9660 -o loop {args.iso} {pxe_mount}"
  read_as_string(cmd.split())

  args.is_coreos = os.path.exists("/var/ftp/mnt/coreos")

  print(f'{"Coreos" if args.is_coreos else "Rhel"} detected')

  rhel_files = [
    "BOOTAA64.EFI",
    "grubaa64.efi",
    "mmaa64.efi"]

  if not all(map(os.path.exists, rhel_files)):
    print("Missing boot files, downloading efiboot.img from RHEL-8.4")
    if not os.path.exists("efiboot.img"):
      url = "http://download.eng.bos.redhat.com/released/rhel-8/RHEL-8/8.4.0/BaseOS/aarch64/os/images/efiboot.img"
      cmd = f"wget -N {url}"
      print(read_as_string(cmd.split()))
    mount_path = f"/var/ftp/efibootimg"
    cmd = f"mkdir -p {mount_path}"
    print(read_as_string(cmd.split()))
    cmd = f"mount efiboot.img {mount_path}"
    print(read_as_string(cmd.split()))

    for file in rhel_files:
      copy(f"{mount_path}/EFI/BOOT/{file}", "/var/lib/tftpboot/")

  ftpboot_pxe_dir_name = f"/var/lib/tftpboot/pxelinux"
  cmd = "mkdir -p " + ftpboot_pxe_dir_name
  print(read_as_string(cmd.split()))
  copy(os.path.join(pxe_mount, "images/pxeboot/vmlinuz"), ftpboot_pxe_dir_name)
  copy(os.path.join(pxe_mount, "images/pxeboot/initrd.img"), ftpboot_pxe_dir_name)
  copy(os.path.join(pxe_mount, "images/ignition.img"), ftpboot_pxe_dir_name)

  fn = "/var/lib/tftpboot/grub.cfg"
  print(f"writing configuration to {fn}")
  write_file(fn, grub_config("pxelinux", args.ip, args.is_coreos))

  fn = "/etc/dhcp/dhcpd.conf"
  print(f"writing configuration to {fn}")
  write_file(fn, dhcp_config(args.ip, args.subnet))

def bf_select_pxe_entry(args):
  ESC="\x1b"
  KEY_DOWN = '\x1b[B'
  KEY_ENTER = '\r\n'

  read_as_string("pkill -9 minicom".split())
  print("spawn minicom")
  child = pexpect.spawn(f'minicom --baudrate 115200 --device {rshim_base(args)}/console')
  child.maxread=10000
  print("waiting 30 sec for the boot countdown to interrupt it and go to bios")
  child.expect("3 seconds remainin", timeout=30)
  print("found countdown, sending 'esc' twice")
  child.send(ESC*2)
  time.sleep(1)
  child.close()
  print("respawning minicom")
  child = pexpect.spawn(f'minicom --baudrate 115200 --device {rshim_base(args)}/console')
  time.sleep(1)
  print("pressing down")
  child.send(KEY_DOWN)
  time.sleep(1)
  print("waiting on language option")
  child.expect("This is the option.*one adjusts to change.*the language for the.*current system", timeout=3)
  print("pressing down again")
  child.send(KEY_DOWN)
  print("wainting for Boot manager entry")
  child.expect("This selection will.*take you to the Boot.*Manager", timeout=3)
  print("sending enter")
  child.send(KEY_ENTER)
  child.expect("Device Path")
  retry = 30
  while retry:
    child.send(KEY_DOWN)
    time.sleep(0.1)
    try:
      child.expect("MAC.001ACAFFFF..,0x1.*IPv4.0.0.0.0.", timeout=1)
      break
    except:
      print(f"didn't find tmfifo pxe boot interface, will retry {retry} more times")
      retry -= 1
  if not retry:
    print("Didn't find boot interface")
    sys.exit(-1)
  else:
    print("Found boot interface, sending 'enter'")
    child.send(KEY_ENTER)
    time.sleep(1)
  child.close()

def run(cmd):
  cmd = cmd.split()
  p = Process(target=read_as_string, args=(cmd,))
  p.start()
  return p

def http_server():
  os.chdir("/www")
  server_address = ('', 80)
  handler = http.server.SimpleHTTPRequestHandler
  httpd = http.server.HTTPServer(server_address, handler)
  httpd.serve_forever()

def split_nfs_path(n):
  splitted = n.split(":")
  return splitted[0], ":".join(splitted[1:])

def mount_nfs_path(arg, mount_path):
  mount_path = "/mnt/iso"
  if not os.path.exists(mount_path):
    os.mkdir(mount_path)
  ip, path = split_nfs_path(arg)
  print(f"mounting {ip}:{os.path.dirname(path)} at {mount_path}")
  os.system(f"mount {ip}:{os.path.dirname(path)} {mount_path}")
  return os.path.join(mount_path, os.path.basename(path))

def wait_and_login(args):
  with open(args.id_rsa, "r") as f:
    id_rsa = f.read().strip()

  while True:
    try:
      host = paramiko.SSHClient()
      host.set_missing_host_key_policy(paramiko.AutoAddPolicy())
      pkey = paramiko.RSAKey.from_private_key(io.StringIO(id_rsa))
      host.connect("172.31.100.11", username = 'core', pkey = pkey)
      break
    except paramiko.ssh_exception.NoValidConnectionsError as e:
      print(f"Unable to establish SSH connection: {e}")
      time.sleep(1)

  print("BF is up (ssh connection established)")
  local_date = read_as_string("date")[0]
  print(f"setting date to {local_date}")
  host.exec_command(f"sudo date -s '{local_date}'")
  print("getting ip addresses")
  ipa = host.exec_command("ip --json a")[1].readlines()[0].strip()
  host.close()
  return ipa

def try_pxy_boot():
  args = read_args()
  validate_args(args)

  if ":/" in args.iso:
    args.iso = mount_nfs_path(args.iso, "/mnt/iso")

  if ":/" in args.id_rsa:
    args.id_rsa = mount_nfs_path(args.id_rsa, "/mnt/id_rsa")

  args.port = "tmfifo_net0"
  prepare_pxe(args)

  print("Rebooting bf")
  bf_reboot(args)

  # need to wait long enough after reboot before setting
  # ip, otherwise it will be removed again
  time.sleep(5)
  read_as_string(("ip a a %s/%s dev %s" % (args.ip, args.net_prefix, args.port)).split())

  children = []

  print("starting dhpcd")
  read_as_string("killall dhcpd".split())
  p = run("/usr/sbin/dhcpd -f -cf /etc/dhcp/dhcpd.conf -user dhcpd -group dhcpd")
  children.append(p)

  os.makedirs("/www", exist_ok=True)
  if not os.path.exists("/www/rootfs.img") and os.path.exists("/var/ftp/mnt/images/pxeboot/rootfs.img"):
    shutil.copy("/var/ftp/mnt/images/pxeboot/rootfs.img", "/www")

  if not os.path.exists("/www/kickstart.ks"):
    shutil.copy("/kickstart.ks", "/www")

  base = f"/var/lib/tftpboot/pxelinux"
  os.makedirs("/www/", exist_ok=True)
  if not os.path.exists("/www/vmlinuz"):
    shutil.copy(os.path.join(base, "vmlinuz"), "/www/vmlinuz")
  if not os.path.exists("/www/initrd.img"):
    shutil.copy(os.path.join(base, "initrd.img"), "/www/initrd.img")
  if not os.path.exists("/www/mnt") and os.path.exists("/var/ftp/mnt/images"):
    os.system("ln -s /www/mnt /var/ftp/mnt")

  print("starting http server")
  p = Process(target=http_server)
  p.start()
  children.append(p)

  print("starting in.tftpd")
  read_as_string("killall in.tftpd".split())
  p = run("/usr/sbin/in.tftpd -s -L /var/lib/tftpboot")
  children.append(p)
  print("selecting pxe entry in bf")
  bf_select_pxe_entry(args)

  if args.id_rsa:
    ipa = wait_and_login(args)
  else:
    # avoid killing services to allow booting
    time.sleep(1000)

  print("Terminating http, ftp, and dhcpd")
  for e in children:
    e.terminate()
  if ipa:
    print(ipa)

def main():
  for retry in range(3):
    try:
      try_pxy_boot()
      break
    except Exception as e:
      print(e)
      print(f"pxe boot failed, retrying (count {retry + 1})")
      pass

if __name__ == "__main__":
  main()
